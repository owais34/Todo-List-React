{"version":3,"sources":["components/List/ListItem.js","components/List/List.js","components/Container/Contain.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","name","onRemove","onPass","id","id2","className","IconButton","onClick","List","list","Paper","map","item","index","Contain","useState","text","todo","progress","done","state","setstate","elevation","Button","length","currarr","push","TextField","label","variant","value","onChange","e","target","console","log","splice","currarr2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b626225.chunk.js","sourcesContent":["import React from 'react'\nimport IconButton from '@material-ui/core/IconButton';\nimport Cancel from '@material-ui/icons/Cancel';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport './ListItem.css'\n\nfunction ListItem({name,onRemove,onPass,id2}) {\n    var id=id2 \n\n    const onPassItem=()=>{\n        onPass(id)\n    }\n    const onRemoveItem=()=>{\n        onRemove(id)\n    }\n    return (\n        <div className=\"list-item\">\n            <div className=\"list-item-header\">\n            <IconButton onClick={onPassItem} className=\"button-item\">\n                <ChevronRightIcon />\n            </IconButton>\n            <IconButton onClick={onRemoveItem} className=\"button-item-2\">\n                <Cancel />\n            </IconButton>\n            </div>\n            <h3>{name}</h3>      \n        </div>\n    )\n}\n\nexport default ListItem\n","import React from 'react'\nimport './List.css'\nimport {Paper} from '@material-ui/core'\nimport ListItem from './ListItem'\n\nfunction List({name,list,onRemove,onPass}) {\n    \n    return (\n        <Paper className=\"list\">\n            <h3>{name}</h3>\n            <div className=\"item-container\">\n            {list.map((item,index)=>(\n                <ListItem name={item} id={index} onRemove={onRemove} onPass={onPass} id2={index}/>\n            ))}\n            </div>\n        </Paper>\n    )\n}\n\nexport default List\n","import React,{useState} from 'react'\nimport './Contain.css'\nimport {Paper, Button,TextField} from '@material-ui/core'\nimport List from '../List/List'\n\nfunction Contain() {\n    const [state, setstate] = useState({text:\"\",todo:[\"task1\"],progress:[],done:[]})\n    const fillText=(e)=>{\n        setstate({...state,text:e.target.value})\n    }\n\n    const addtoTodo=()=>{\n        if(state.text.length!==0)\n            {   \n                const text=state.text\n                const currarr=state.todo\n                currarr.push(text)\n                setstate({...state,todo:currarr})\n            }\n\n    }\n    const onRemoveTodo=(id)=>{\n        let currarr=state.todo\n        console.log(id)\n        currarr.splice(id,1)\n        setstate({...state,todo:currarr})\n    }\n    const onRemoveProgress=(id)=>{\n        let currarr=state.progress\n        currarr.splice(id,1)\n        setstate({...state,progress:currarr})\n    }\n    const onRemoveDone=(id)=>{\n        const currarr=state.done\n        currarr.splice(id,1)\n        setstate({...state,done:currarr})\n    }\n    const onPassTodo=(id)=>{\n        const currarr=state.todo\n        const item=state.todo[id]\n        console.log(id)\n        currarr.splice(id,1)\n        const currarr2=state.progress\n        currarr2.push(item)\n        setstate({...state,todo:currarr,progress:currarr2})\n        console.log(state)\n    }\n    const onPassProgress=(id)=>{\n        const currarr=state.progress\n        const item=state.progress[id]\n        console.log(item)\n        currarr.splice(id,1)\n        const currarr2=state.done\n        currarr2.push(item)\n        setstate({...state,progress:currarr,done:currarr2})\n        console.log(state)\n    }\n    const onPassDone=(id)=>{\n        const currarr=state.done\n        currarr.splice(id,1)\n        setstate({...state,done:currarr})\n        console.log(state)\n    }\n    return (\n            <Paper className=\"contain\" elevation={3}>\n                <div className=\"header\">\n                <Button className=\"button\" onClick={addtoTodo}>Add New Task</Button>\n                <TextField id=\"standard-basic\" label=\"Name of task\" variant=\"filled\" className=\"text\" value={state.text} onChange={fillText}/>\n                </div>\n                <div className=\"boxes\">\n                <List name={\"To do\"} list={state.todo} onRemove={onRemoveTodo} onPass={onPassTodo}/>\n                <List name={\"In Progress\"} list={state.progress} onRemove={onRemoveProgress} onPass={onPassProgress}/>\n                <List name={\"Done\"} list={state.done} onRemove={onRemoveDone} onPass={onPassDone}/>\n                </div>\n            </Paper>\n    )\n}\n\nexport default Contain\n","import React from 'react';\nimport './App.css';\nimport Contain from './components/Container/Contain';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Contain/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}